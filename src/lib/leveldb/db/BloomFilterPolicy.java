package bsd.leveldb.db;

import java.util.Collection;

import bsd.leveldb.Slice;

class BloomFilterPolicy implements FilterPolicy {

    static final long u32 = 0x0ffffffffL;

    static long BloomHash(Slice key) {
        return Slice.hash( key.data, key.offset, key.length, 0xbc9f1d34 ) & u32;
    }

    final int bitsPerKey;
    final int nProbes; // k_

    BloomFilterPolicy(int bitsPerKey) {

        // A good value for bits_per_key is 10,
        // which yields a filter with ~ 1% false positive rate.

        this.bitsPerKey = bitsPerKey < 0 ? 10 : bitsPerKey;

        // We intentionally round down to reduce probing cost a little bit
        int k = (int) (this.bitsPerKey * 0.69);  // 0.69 =~ ln(2)
        if (k < 1) k = 1;
        if (k > 30) k = 30;
        this.nProbes = k;
    }

    @Override
    public String name() {
        return "leveldb.BuiltinBloomFilter2";
    }

    @Override
    public Slice createFilter(Collection<Slice> keys) {

        // Compute bloom filter size (in both bits and bytes)
        int bits = keys.size() * bitsPerKey;

        // For small n, we can see a very high false positive rate.
        // Fix it by enforcing a minimum bloom filter length.
        if (bits < 64) bits = 64;

        int bytes = (bits + 7) / 8;
        bits = bytes * 8;

        byte[] array = new byte[bytes + 1];
        array[array.length-1] = (byte) nProbes; // Remember # of probes in filter
        for (Slice key : keys) {
            // Use double-hashing to generate a sequence of hash values.
            // See analysis in [Kirsch,Mitzenmacher 2006].
            long h = BloomHash(key);
            long delta = (h >>> 17) | (h << 15);  // Rotate right 17 bits
            for (int j = 0; j < nProbes; j++) {
                int bitpos = (int)( h % bits );
                array[bitpos/8] |= (1 << (bitpos % 8));
                h += delta;
                h &= u32;
            }
        }
        return new Slice(array);
    }

    @Override
    public boolean keyMayMatch(Slice key, Slice bloomFilter) {
        if (key == null || bloomFilter == null || bloomFilter.length < 2) {
            return false;
        }
        byte[] array = bloomFilter.data;
        int o = bloomFilter.offset;
        int len = bloomFilter.length;
        int bits = (len - 1) * 8;

        // Use the encoded k so that we can read filters generated by
        // bloom filters created using different parameters.
        int k = array[o+(len-1)];
        if (k > 30) {
            // Reserved for potentially new encodings for short bloom filters.
            // Consider it a match.
            return true;
        }

        long h = BloomHash(key);
        long delta = (h >>> 17) | (h << 15); // Rotate right 17 bits
        for (int j = 0; j < k; j++) {
            int bitpos = (int)( h % bits );
            if ((array[o+(bitpos/8)] & (1 << (bitpos % 8))) == 0) return false;
            h += delta;
            h &= u32;
        }
        return true;
    }

}
